{"ast":null,"code":"var _jsxFileName = \"/home/ilan/dev/cc-tools/pages/decode/hex/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { parse } from \"ethers/utils/transaction\";\nimport TxInfo from \"../../../components/Transaction\";\n\nclass HexDecoder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"decodeTx\", e => {\n      try {\n        let decodedTx = parse(e.target.value);\n\n        if (decodedTx) {\n          this.setState({\n            decodedTx,\n            errorMsg: \"\"\n          });\n        }\n\n        console.log(decodedTx);\n      } catch (e) {\n        if (e instanceof Error) {\n          console.log(e.message);\n          this.setState({\n            decodeTx: undefined,\n            errorMsg: e.message\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"render\", () => {\n      const textClass = this.state.errorMsg !== \"\" ? \"is-invalid form-control\" : \"form-control\";\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        \"html-for\": \"decode-tx\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Enter Raw Hex\"), __jsx(\"textarea\", {\n        className: textClass,\n        id: \"decode-tx\",\n        onChange: this.decodeTx,\n        rows: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, this.state.errorMsg)), this.state.decodedTx && __jsx(TxInfo, {\n        t: this.state.decodedTx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }));\n    });\n\n    this.state = {\n      decodeTx: \"\",\n      errorMsg: \"\"\n    };\n  }\n\n}\n\nexport default HexDecoder;","map":{"version":3,"sources":["/home/ilan/dev/cc-tools/pages/decode/hex/index.tsx"],"names":["React","parse","TxInfo","HexDecoder","Component","constructor","props","e","decodedTx","target","value","setState","errorMsg","console","log","Error","message","decodeTx","undefined","textClass","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,QAAmC,0BAAnC;AACA,OAAOC,MAAP,MAAmB,iCAAnB;;AAQA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAA8D;AAC1DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,sCAQPC,CAAD,IAAqD;AAC5D,UAAI;AACA,YAAIC,SAAS,GAAGP,KAAK,CAACM,CAAC,CAACE,MAAF,CAASC,KAAV,CAArB;;AACA,YAAIF,SAAJ,EAAe;AACX,eAAKG,QAAL,CAAc;AACVH,YAAAA,SADU;AAEVI,YAAAA,QAAQ,EAAE;AAFA,WAAd;AAIH;;AACDC,QAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACH,OATD,CASE,OAAOD,CAAP,EAAU;AACR,YAAIA,CAAC,YAAYQ,KAAjB,EAAwB;AACpBF,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACS,OAAd;AACA,eAAKL,QAAL,CAAc;AACVM,YAAAA,QAAQ,EAAEC,SADA;AAEVN,YAAAA,QAAQ,EAAEL,CAAC,CAACS;AAFF,WAAd;AAIH;AACJ;AACJ,KA3BkB;;AAAA,oCA6BV,MAAM;AACX,YAAMG,SAAS,GACX,KAAKC,KAAL,CAAWR,QAAX,KAAwB,EAAxB,GACM,yBADN,GAEM,cAHV;AAIA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,oBAAS,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI;AACI,QAAA,SAAS,EAAEO,SADf;AAEI,QAAA,EAAE,EAAC,WAFP;AAGI,QAAA,QAAQ,EAAE,KAAKF,QAHnB;AAII,QAAA,IAAI,EAAC,GAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAQI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKG,KAAL,CAAWR,QADhB,CARJ,CADJ,EAcK,KAAKQ,KAAL,CAAWZ,SAAX,IAAyB,MAAC,MAAD;AAAQ,QAAA,CAAC,EAAE,KAAKY,KAAL,CAAWZ,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAd9B,CADJ;AAkBH,KApDkB;;AAEf,SAAKY,KAAL,GAAa;AACTH,MAAAA,QAAQ,EAAE,EADD;AAETL,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAIH;;AAPyD;;AAwD9D,eAAeT,UAAf","sourcesContent":["import React from \"react\";\n\nimport { parse, Transaction } from \"ethers/utils/transaction\";\nimport TxInfo from \"../../../components/Transaction\";\n\ninterface HexDecoderState {\n    decodeTx: string;\n    decodedTx?: Transaction;\n    errorMsg: string;\n}\n\nclass HexDecoder extends React.Component<{}, HexDecoderState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            decodeTx: \"\",\n            errorMsg: \"\"\n        };\n    }\n\n    decodeTx = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n        try {\n            let decodedTx = parse(e.target.value);\n            if (decodedTx) {\n                this.setState({\n                    decodedTx,\n                    errorMsg: \"\"\n                });\n            }\n            console.log(decodedTx);\n        } catch (e) {\n            if (e instanceof Error) {\n                console.log(e.message);\n                this.setState({\n                    decodeTx: undefined,\n                    errorMsg: e.message\n                });\n            }\n        }\n    };\n\n    render = () => {\n        const textClass =\n            this.state.errorMsg !== \"\"\n                ? \"is-invalid form-control\"\n                : \"form-control\";\n        return (\n            <div>\n                <div className=\"form-group\">\n                    <label html-for=\"decode-tx\">Enter Raw Hex</label>\n                    <textarea\n                        className={textClass}\n                        id=\"decode-tx\"\n                        onChange={this.decodeTx}\n                        rows=\"5\"\n                    />\n                    <div className=\"invalid-feedback\">\n                        {this.state.errorMsg}\n                    </div>\n                </div>\n\n                {this.state.decodedTx && (<TxInfo t={this.state.decodedTx} />)}\n            </div>\n        );\n    };\n}\n\nexport default HexDecoder;\n"]},"metadata":{},"sourceType":"module"}