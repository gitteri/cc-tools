{"version":3,"file":"static/webpack/static/development/pages/decode/hex.js.345fb48b6f05b9d0abd6.hot-update.js","sources":["webpack:///./components/Transaction.tsx","webpack:///./pages/decode/hex/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { Transaction, populateTransaction } from \"ethers/utils/transaction\";\n\n    // hash?: string;\n    // to?: string;\n    // from?: string;\n    // nonce: number;\n    // gasLimit: BigNumber;\n    // gasPrice: BigNumber;\n    // data: string;\n    // value: BigNumber;\n    // chainId: number;\n    // r?: string;\n    // s?: string;\n    // v?: number;\nconst TxInfo = (t: Transaction) => (\n    <>\n        <div>\n            <IfExists t={t} k=\"hash\" type=\"string\" />\n        </div>\n    </>\n);\n\ninterface IfExistsProps {\n    t: Transaction;\n    k: string;\n    type: string;\n}\n\nconst IfExists: React.FC<IfExistsProps> = ({t, k, type}) => {\n    if (!t[k]) {\n        return null;\n    }\n\n    switch (type) {\n        case \"string\":\n            return <div>{k}: {t[k]}</div>\n    }\n}\n\n// {\"nonce\":3,\"gasPrice\":{\"_hex\":\"0x3b9aca00\"},\"gasLimit\":{\"_hex\":\"0xdb91\"},\"to\":\"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\"value\":{\"_hex\":\"0x00\"},\"data\":\"0xa9059cbb000000000000000000000000954ef2f18ae8426ffb94466b986bfea7069c13410000000000000000000000000000000000000000000000000000000043c73d60\",\"chainId\":0,\"v\":28,\"r\":\"0x35fa020909b4a5e36533e5d1398772631ab83b556f63d2e9a44254f9aca30c00\",\"s\":\"0x3da9b5769419f214ecb7c2027c8233b4294986b48651af1210ab6f7f331cd365\",\"from\":\"0x80c2AE82885A4A61C083c90c53B039fF20e3F013\",\"hash\":\"0x55f956cf92ff9bcfc815ce878bcfbe89d8f62ad411b842b031c9a8021a16b152\"}\n\nexport default TxInfo","import React from \"react\";\n\nimport { parse, Transaction } from \"ethers/utils/transaction\";\nimport TxInfo from \"../../../components/Transaction\";\n\ninterface HexDecoderState {\n    decodeTx: string;\n    decodedTx?: Transaction;\n    errorMsg: string;\n}\n\nclass HexDecoder extends React.Component<{}, HexDecoderState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            decodeTx: \"\",\n            errorMsg: \"\"\n        };\n    }\n\n    decodeTx = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n        try {\n            let decodedTx = parse(e.target.value);\n            if (decodedTx) {\n                this.setState({\n                    decodedTx,\n                    errorMsg: \"\"\n                });\n            }\n            console.log(decodedTx);\n        } catch (e) {\n            if (e instanceof Error) {\n                console.log(e.message);\n                this.setState({\n                    decodeTx: undefined,\n                    errorMsg: e.message\n                });\n            }\n        }\n    };\n\n    render = () => {\n        const textClass =\n            this.state.errorMsg !== \"\"\n                ? \"is-invalid form-control\"\n                : \"form-control\";\n        return (\n            <div>\n                <div className=\"form-group\">\n                    <label html-for=\"decode-tx\">Enter Raw Hex</label>\n                    <textarea\n                        className={textClass}\n                        id=\"decode-tx\"\n                        onChange={this.decodeTx}\n                        html-rows=\"4\"\n                    />\n                    <div className=\"invalid-feedback\">\n                        {this.state.errorMsg}\n                    </div>\n                </div>\n\n                <TxInfo t={this.state.decodedTx} />\n\n                {JSON.stringify(this.state.decodedTx)}\n            </div>\n        );\n    };\n}\n\nexport default HexDecoder;\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AAEA;AACA;AACA;AAOA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AA5BA;AA8BA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AArDA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;AARA;AACA;AAyDA;;;;A","sourceRoot":""}