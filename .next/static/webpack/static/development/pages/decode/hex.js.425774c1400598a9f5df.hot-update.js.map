{"version":3,"file":"static/webpack/static/development/pages/decode/hex.js.425774c1400598a9f5df.hot-update.js","sources":["webpack:///./pages/decode/hex/index.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { parse, Transaction } from \"ethers/utils/transaction\";\nimport TxInfo from \"../../../components/Transaction\";\n\ninterface HexDecoderState {\n    decodeTx: string;\n    decodedTx?: Transaction;\n    errorMsg: string;\n}\n\nclass HexDecoder extends React.Component<{}, HexDecoderState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            decodeTx: \"\",\n            errorMsg: \"\"\n        };\n    }\n\n    decodeTx = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n        try {\n            let decodedTx = parse(e.target.value);\n            if (decodedTx) {\n                this.setState({\n                    decodedTx,\n                    errorMsg: \"\"\n                });\n            }\n            console.log(decodedTx);\n        } catch (e) {\n            if (e instanceof Error) {\n                console.log(e.message);\n                this.setState({\n                    decodeTx: undefined,\n                    errorMsg: e.message\n                });\n            }\n        }\n    };\n\n    render = () => {\n        const textClass =\n            this.state.errorMsg !== \"\"\n                ? \"is-invalid form-control\"\n                : \"form-control\";\n        return (\n            <div>\n                <div className=\"form-group\">\n                    <label html-for=\"decode-tx\">Enter Raw Hex</label>\n                    <textarea\n                        className={textClass}\n                        id=\"decode-tx\"\n                        onChange={this.decodeTx}\n                        rows=\"5\"\n                    />\n                    <div className=\"invalid-feedback\">\n                        {this.state.errorMsg}\n                    </div>\n                </div>\n\n                {this.state.decodedTx && (<TxInfo t={this.state.decodedTx} />)}\n            </div>\n        );\n    };\n}\n\nexport default HexDecoder;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAOA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AA5BA;AA8BA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAnDA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;AARA;AACA;AAuDA;;;;A","sourceRoot":""}