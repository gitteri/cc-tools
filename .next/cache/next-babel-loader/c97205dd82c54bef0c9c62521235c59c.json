{"ast":null,"code":"var _jsxFileName = \"/home/ilan/dev/cc-tools/pages/decode/hex/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { parse } from \"ethers/utils/transaction\";\n\nclass HexDecoder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"decodeTx\", e => {\n      try {\n        let decodedTx = parse(e.target.value);\n\n        if (decodedTx) {\n          this.setState({\n            decodedTx,\n            errorMsg: \"\"\n          });\n        }\n\n        console.log(decodedTx);\n      } catch (e) {\n        if (e instanceof Error) {\n          console.log(e.message);\n          this.setState({\n            decodeTx: undefined,\n            errorMsg: e.message\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"render\", () => __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      \"html-for\": \"decode-tx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Enter Raw Hex\"), __jsx(\"textarea\", {\n      className: \"form-control\",\n      id: \"decode-tx\",\n      onChange: this.decodeTx,\n      \"html-rows\": \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), this.state.errorMsg !== \"\" ? __jsx(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.state.errorMsg)) : \"something\"), JSON.stringify(this.state.decodedTx)));\n\n    this.state = {\n      decodeTx: \"\",\n      errorMsg: \"\"\n    };\n  }\n\n}\n\nexport default HexDecoder;","map":{"version":3,"sources":["/home/ilan/dev/cc-tools/pages/decode/hex/index.tsx"],"names":["React","parse","HexDecoder","Component","constructor","props","e","decodedTx","target","value","setState","errorMsg","console","log","Error","message","decodeTx","undefined","state","JSON","stringify"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,QAAmC,0BAAnC;;AAQA,MAAMC,UAAN,SAAyBF,KAAK,CAACG,SAA/B,CAA8D;AAC5DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,sCAQPC,CAAD,IAAqD;AAC9D,UAAI;AACF,YAAIC,SAAS,GAAGN,KAAK,CAACK,CAAC,CAACE,MAAF,CAASC,KAAV,CAArB;;AACA,YAAIF,SAAJ,EAAe;AACb,eAAKG,QAAL,CAAc;AACZH,YAAAA,SADY;AAEZI,YAAAA,QAAQ,EAAE;AAFE,WAAd;AAID;;AACDC,QAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACD,OATD,CASE,OAAOD,CAAP,EAAU;AACV,YAAIA,CAAC,YAAYQ,KAAjB,EAAwB;AACtBF,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAC,CAACS,OAAd;AACA,eAAKL,QAAL,CAAc;AACZM,YAAAA,QAAQ,EAAEC,SADE;AAEZN,YAAAA,QAAQ,EAAEL,CAAC,CAACS;AAFA,WAAd;AAID;AACF;AACF,KA3BkB;;AAAA,oCA6BV,MACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,kBAAS,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,EAAE,EAAC,WAFL;AAGE,MAAA,QAAQ,EAAE,KAAKC,QAHjB;AAIE,mBAAU,GAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAQG,KAAKE,KAAL,CAAWP,QAAX,KAAwB,EAAxB,GACC;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,KAAKO,KAAL,CAAWP,QAAlB,CADF,CADD,GAKC,WAbJ,CADF,EAiBGQ,IAAI,CAACC,SAAL,CAAe,KAAKF,KAAL,CAAWX,SAA1B,CAjBH,CA9BiB;;AAEjB,SAAKW,KAAL,GAAa;AACXF,MAAAA,QAAQ,EAAE,EADC;AAEXL,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID;;AAP2D;;AAqD9D,eAAeT,UAAf","sourcesContent":["import React from \"react\";\n\nimport { parse, Transaction } from \"ethers/utils/transaction\";\n\ninterface HexDecoderState {\n  decodeTx: string;\n  decodedTx?: Transaction;\n  errorMsg: string;\n}\n\nclass HexDecoder extends React.Component<{}, HexDecoderState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      decodeTx: \"\",\n      errorMsg: \"\"\n    };\n  }\n\n  decodeTx = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    try {\n      let decodedTx = parse(e.target.value);\n      if (decodedTx) {\n        this.setState({\n          decodedTx,\n          errorMsg: \"\"\n        });\n      }\n      console.log(decodedTx);\n    } catch (e) {\n      if (e instanceof Error) {\n        console.log(e.message);\n        this.setState({\n          decodeTx: undefined,\n          errorMsg: e.message\n        });\n      }\n    }\n  };\n\n  render = () => (\n    <div>\n      <div className=\"form-group\">\n        <label html-for=\"decode-tx\">Enter Raw Hex</label>\n        <textarea\n          className=\"form-control\"\n          id=\"decode-tx\"\n          onChange={this.decodeTx}\n          html-rows=\"4\"\n        />\n        {this.state.errorMsg !== \"\" ? (\n          <div className=\"invalid-feedback\">\n            <span>{this.state.errorMsg}</span>\n          </div>\n        ) : (\n          \"something\"\n        )}\n      </div>\n      {JSON.stringify(this.state.decodedTx)}\n    </div>\n  );\n}\n\nexport default HexDecoder;\n"]},"metadata":{},"sourceType":"module"}